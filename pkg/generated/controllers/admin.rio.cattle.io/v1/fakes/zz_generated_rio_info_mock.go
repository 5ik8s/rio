// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1a "github.com/rancher/rio/pkg/apis/admin.rio.cattle.io/v1"
	v1 "github.com/rancher/rio/pkg/generated/controllers/admin.rio.cattle.io/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockRioInfoControllerMockAddGenericHandler       sync.RWMutex
	lockRioInfoControllerMockAddGenericRemoveHandler sync.RWMutex
	lockRioInfoControllerMockCache                   sync.RWMutex
	lockRioInfoControllerMockCreate                  sync.RWMutex
	lockRioInfoControllerMockDelete                  sync.RWMutex
	lockRioInfoControllerMockEnqueue                 sync.RWMutex
	lockRioInfoControllerMockGet                     sync.RWMutex
	lockRioInfoControllerMockGroupVersionKind        sync.RWMutex
	lockRioInfoControllerMockInformer                sync.RWMutex
	lockRioInfoControllerMockList                    sync.RWMutex
	lockRioInfoControllerMockOnChange                sync.RWMutex
	lockRioInfoControllerMockOnRemove                sync.RWMutex
	lockRioInfoControllerMockPatch                   sync.RWMutex
	lockRioInfoControllerMockUpdate                  sync.RWMutex
	lockRioInfoControllerMockUpdateStatus            sync.RWMutex
	lockRioInfoControllerMockUpdater                 sync.RWMutex
	lockRioInfoControllerMockWatch                   sync.RWMutex
)

// Ensure, that RioInfoControllerMock does implement RioInfoController.
// If this is not the case, regenerate this file with moq.
var _ v1.RioInfoController = &RioInfoControllerMock{}

// RioInfoControllerMock is a mock implementation of RioInfoController.
//
//     func TestSomethingThatUsesRioInfoController(t *testing.T) {
//
//         // make and configure a mocked RioInfoController
//         mockedRioInfoController := &RioInfoControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.RioInfoCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.RioInfo, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.RioInfoList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.RioInfoHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.RioInfoHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RioInfo, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRioInfoController in code that requires RioInfoController
//         // and then make assertions.
//
//     }
type RioInfoControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.RioInfoCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.RioInfo) (*v1a.RioInfo, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(name string)

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.RioInfo, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.RioInfoList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.RioInfoHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.RioInfoHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RioInfo, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.RioInfo) (*v1a.RioInfo, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.RioInfo) (*v1a.RioInfo, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RioInfo
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.RioInfoHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.RioInfoHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RioInfo
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RioInfo
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *RioInfoControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("RioInfoControllerMock.AddGenericHandlerFunc: method is nil but RioInfoController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRioInfoControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockRioInfoControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedRioInfoController.AddGenericHandlerCalls())
func (mock *RioInfoControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockRioInfoControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockRioInfoControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *RioInfoControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("RioInfoControllerMock.AddGenericRemoveHandlerFunc: method is nil but RioInfoController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRioInfoControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockRioInfoControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedRioInfoController.AddGenericRemoveHandlerCalls())
func (mock *RioInfoControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockRioInfoControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockRioInfoControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *RioInfoControllerMock) Cache() v1.RioInfoCache {
	if mock.CacheFunc == nil {
		panic("RioInfoControllerMock.CacheFunc: method is nil but RioInfoController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockRioInfoControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockRioInfoControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedRioInfoController.CacheCalls())
func (mock *RioInfoControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockRioInfoControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockRioInfoControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RioInfoControllerMock) Create(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
	if mock.CreateFunc == nil {
		panic("RioInfoControllerMock.CreateFunc: method is nil but RioInfoController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.RioInfo
	}{
		In1: in1,
	}
	lockRioInfoControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRioInfoControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRioInfoController.CreateCalls())
func (mock *RioInfoControllerMock) CreateCalls() []struct {
	In1 *v1a.RioInfo
} {
	var calls []struct {
		In1 *v1a.RioInfo
	}
	lockRioInfoControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockRioInfoControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RioInfoControllerMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RioInfoControllerMock.DeleteFunc: method is nil but RioInfoController.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRioInfoControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRioInfoControllerMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRioInfoController.DeleteCalls())
func (mock *RioInfoControllerMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockRioInfoControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockRioInfoControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RioInfoControllerMock) Enqueue(name string) {
	if mock.EnqueueFunc == nil {
		panic("RioInfoControllerMock.EnqueueFunc: method is nil but RioInfoController.Enqueue was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockRioInfoControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRioInfoControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedRioInfoController.EnqueueCalls())
func (mock *RioInfoControllerMock) EnqueueCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockRioInfoControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRioInfoControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RioInfoControllerMock) Get(name string, options v1b.GetOptions) (*v1a.RioInfo, error) {
	if mock.GetFunc == nil {
		panic("RioInfoControllerMock.GetFunc: method is nil but RioInfoController.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRioInfoControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRioInfoControllerMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRioInfoController.GetCalls())
func (mock *RioInfoControllerMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockRioInfoControllerMockGet.RLock()
	calls = mock.calls.Get
	lockRioInfoControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *RioInfoControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("RioInfoControllerMock.GroupVersionKindFunc: method is nil but RioInfoController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockRioInfoControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockRioInfoControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedRioInfoController.GroupVersionKindCalls())
func (mock *RioInfoControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockRioInfoControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockRioInfoControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RioInfoControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RioInfoControllerMock.InformerFunc: method is nil but RioInfoController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRioInfoControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRioInfoControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedRioInfoController.InformerCalls())
func (mock *RioInfoControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRioInfoControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRioInfoControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RioInfoControllerMock) List(opts v1b.ListOptions) (*v1a.RioInfoList, error) {
	if mock.ListFunc == nil {
		panic("RioInfoControllerMock.ListFunc: method is nil but RioInfoController.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockRioInfoControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRioInfoControllerMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRioInfoController.ListCalls())
func (mock *RioInfoControllerMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockRioInfoControllerMockList.RLock()
	calls = mock.calls.List
	lockRioInfoControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *RioInfoControllerMock) OnChange(ctx context.Context, name string, sync v1.RioInfoHandler) {
	if mock.OnChangeFunc == nil {
		panic("RioInfoControllerMock.OnChangeFunc: method is nil but RioInfoController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.RioInfoHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRioInfoControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockRioInfoControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedRioInfoController.OnChangeCalls())
func (mock *RioInfoControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.RioInfoHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.RioInfoHandler
	}
	lockRioInfoControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockRioInfoControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *RioInfoControllerMock) OnRemove(ctx context.Context, name string, sync v1.RioInfoHandler) {
	if mock.OnRemoveFunc == nil {
		panic("RioInfoControllerMock.OnRemoveFunc: method is nil but RioInfoController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.RioInfoHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRioInfoControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockRioInfoControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedRioInfoController.OnRemoveCalls())
func (mock *RioInfoControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.RioInfoHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.RioInfoHandler
	}
	lockRioInfoControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockRioInfoControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *RioInfoControllerMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RioInfo, error) {
	if mock.PatchFunc == nil {
		panic("RioInfoControllerMock.PatchFunc: method is nil but RioInfoController.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockRioInfoControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockRioInfoControllerMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedRioInfoController.PatchCalls())
func (mock *RioInfoControllerMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockRioInfoControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockRioInfoControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RioInfoControllerMock) Update(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
	if mock.UpdateFunc == nil {
		panic("RioInfoControllerMock.UpdateFunc: method is nil but RioInfoController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.RioInfo
	}{
		In1: in1,
	}
	lockRioInfoControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRioInfoControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRioInfoController.UpdateCalls())
func (mock *RioInfoControllerMock) UpdateCalls() []struct {
	In1 *v1a.RioInfo
} {
	var calls []struct {
		In1 *v1a.RioInfo
	}
	lockRioInfoControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockRioInfoControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *RioInfoControllerMock) UpdateStatus(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
	if mock.UpdateStatusFunc == nil {
		panic("RioInfoControllerMock.UpdateStatusFunc: method is nil but RioInfoController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.RioInfo
	}{
		In1: in1,
	}
	lockRioInfoControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockRioInfoControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedRioInfoController.UpdateStatusCalls())
func (mock *RioInfoControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.RioInfo
} {
	var calls []struct {
		In1 *v1a.RioInfo
	}
	lockRioInfoControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockRioInfoControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *RioInfoControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("RioInfoControllerMock.UpdaterFunc: method is nil but RioInfoController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockRioInfoControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockRioInfoControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedRioInfoController.UpdaterCalls())
func (mock *RioInfoControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockRioInfoControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockRioInfoControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RioInfoControllerMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RioInfoControllerMock.WatchFunc: method is nil but RioInfoController.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockRioInfoControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRioInfoControllerMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRioInfoController.WatchCalls())
func (mock *RioInfoControllerMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockRioInfoControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockRioInfoControllerMockWatch.RUnlock()
	return calls
}

var (
	lockRioInfoClientMockCreate       sync.RWMutex
	lockRioInfoClientMockDelete       sync.RWMutex
	lockRioInfoClientMockGet          sync.RWMutex
	lockRioInfoClientMockList         sync.RWMutex
	lockRioInfoClientMockPatch        sync.RWMutex
	lockRioInfoClientMockUpdate       sync.RWMutex
	lockRioInfoClientMockUpdateStatus sync.RWMutex
	lockRioInfoClientMockWatch        sync.RWMutex
)

// Ensure, that RioInfoClientMock does implement RioInfoClient.
// If this is not the case, regenerate this file with moq.
var _ v1.RioInfoClient = &RioInfoClientMock{}

// RioInfoClientMock is a mock implementation of RioInfoClient.
//
//     func TestSomethingThatUsesRioInfoClient(t *testing.T) {
//
//         // make and configure a mocked RioInfoClient
//         mockedRioInfoClient := &RioInfoClientMock{
//             CreateFunc: func(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(name string, options v1b.GetOptions) (*v1a.RioInfo, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.RioInfoList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RioInfo, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRioInfoClient in code that requires RioInfoClient
//         // and then make assertions.
//
//     }
type RioInfoClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.RioInfo) (*v1a.RioInfo, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, options v1b.GetOptions) (*v1a.RioInfo, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.RioInfoList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RioInfo, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.RioInfo) (*v1a.RioInfo, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.RioInfo) (*v1a.RioInfo, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RioInfo
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RioInfo
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.RioInfo
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *RioInfoClientMock) Create(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
	if mock.CreateFunc == nil {
		panic("RioInfoClientMock.CreateFunc: method is nil but RioInfoClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.RioInfo
	}{
		In1: in1,
	}
	lockRioInfoClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRioInfoClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRioInfoClient.CreateCalls())
func (mock *RioInfoClientMock) CreateCalls() []struct {
	In1 *v1a.RioInfo
} {
	var calls []struct {
		In1 *v1a.RioInfo
	}
	lockRioInfoClientMockCreate.RLock()
	calls = mock.calls.Create
	lockRioInfoClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RioInfoClientMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RioInfoClientMock.DeleteFunc: method is nil but RioInfoClient.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRioInfoClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRioInfoClientMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRioInfoClient.DeleteCalls())
func (mock *RioInfoClientMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockRioInfoClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockRioInfoClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RioInfoClientMock) Get(name string, options v1b.GetOptions) (*v1a.RioInfo, error) {
	if mock.GetFunc == nil {
		panic("RioInfoClientMock.GetFunc: method is nil but RioInfoClient.Get was just called")
	}
	callInfo := struct {
		Name    string
		Options v1b.GetOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRioInfoClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRioInfoClientMockGet.Unlock()
	return mock.GetFunc(name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRioInfoClient.GetCalls())
func (mock *RioInfoClientMock) GetCalls() []struct {
	Name    string
	Options v1b.GetOptions
} {
	var calls []struct {
		Name    string
		Options v1b.GetOptions
	}
	lockRioInfoClientMockGet.RLock()
	calls = mock.calls.Get
	lockRioInfoClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RioInfoClientMock) List(opts v1b.ListOptions) (*v1a.RioInfoList, error) {
	if mock.ListFunc == nil {
		panic("RioInfoClientMock.ListFunc: method is nil but RioInfoClient.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockRioInfoClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRioInfoClientMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRioInfoClient.ListCalls())
func (mock *RioInfoClientMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockRioInfoClientMockList.RLock()
	calls = mock.calls.List
	lockRioInfoClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *RioInfoClientMock) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.RioInfo, error) {
	if mock.PatchFunc == nil {
		panic("RioInfoClientMock.PatchFunc: method is nil but RioInfoClient.Patch was just called")
	}
	callInfo := struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockRioInfoClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockRioInfoClientMockPatch.Unlock()
	return mock.PatchFunc(name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedRioInfoClient.PatchCalls())
func (mock *RioInfoClientMock) PatchCalls() []struct {
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockRioInfoClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockRioInfoClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RioInfoClientMock) Update(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
	if mock.UpdateFunc == nil {
		panic("RioInfoClientMock.UpdateFunc: method is nil but RioInfoClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.RioInfo
	}{
		In1: in1,
	}
	lockRioInfoClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRioInfoClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRioInfoClient.UpdateCalls())
func (mock *RioInfoClientMock) UpdateCalls() []struct {
	In1 *v1a.RioInfo
} {
	var calls []struct {
		In1 *v1a.RioInfo
	}
	lockRioInfoClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockRioInfoClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *RioInfoClientMock) UpdateStatus(in1 *v1a.RioInfo) (*v1a.RioInfo, error) {
	if mock.UpdateStatusFunc == nil {
		panic("RioInfoClientMock.UpdateStatusFunc: method is nil but RioInfoClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.RioInfo
	}{
		In1: in1,
	}
	lockRioInfoClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockRioInfoClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedRioInfoClient.UpdateStatusCalls())
func (mock *RioInfoClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.RioInfo
} {
	var calls []struct {
		In1 *v1a.RioInfo
	}
	lockRioInfoClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockRioInfoClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RioInfoClientMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RioInfoClientMock.WatchFunc: method is nil but RioInfoClient.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockRioInfoClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRioInfoClientMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRioInfoClient.WatchCalls())
func (mock *RioInfoClientMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockRioInfoClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockRioInfoClientMockWatch.RUnlock()
	return calls
}

var (
	lockRioInfoCacheMockAddIndexer sync.RWMutex
	lockRioInfoCacheMockGet        sync.RWMutex
	lockRioInfoCacheMockGetByIndex sync.RWMutex
	lockRioInfoCacheMockList       sync.RWMutex
)

// Ensure, that RioInfoCacheMock does implement RioInfoCache.
// If this is not the case, regenerate this file with moq.
var _ v1.RioInfoCache = &RioInfoCacheMock{}

// RioInfoCacheMock is a mock implementation of RioInfoCache.
//
//     func TestSomethingThatUsesRioInfoCache(t *testing.T) {
//
//         // make and configure a mocked RioInfoCache
//         mockedRioInfoCache := &RioInfoCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.RioInfoIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(name string) (*v1a.RioInfo, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.RioInfo, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(selector labels.Selector) ([]*v1a.RioInfo, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedRioInfoCache in code that requires RioInfoCache
//         // and then make assertions.
//
//     }
type RioInfoCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.RioInfoIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(name string) (*v1a.RioInfo, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.RioInfo, error)

	// ListFunc mocks the List method.
	ListFunc func(selector labels.Selector) ([]*v1a.RioInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.RioInfoIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *RioInfoCacheMock) AddIndexer(indexName string, indexer v1.RioInfoIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("RioInfoCacheMock.AddIndexerFunc: method is nil but RioInfoCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.RioInfoIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockRioInfoCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockRioInfoCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedRioInfoCache.AddIndexerCalls())
func (mock *RioInfoCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.RioInfoIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.RioInfoIndexer
	}
	lockRioInfoCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockRioInfoCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RioInfoCacheMock) Get(name string) (*v1a.RioInfo, error) {
	if mock.GetFunc == nil {
		panic("RioInfoCacheMock.GetFunc: method is nil but RioInfoCache.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockRioInfoCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRioInfoCacheMockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRioInfoCache.GetCalls())
func (mock *RioInfoCacheMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockRioInfoCacheMockGet.RLock()
	calls = mock.calls.Get
	lockRioInfoCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *RioInfoCacheMock) GetByIndex(indexName string, key string) ([]*v1a.RioInfo, error) {
	if mock.GetByIndexFunc == nil {
		panic("RioInfoCacheMock.GetByIndexFunc: method is nil but RioInfoCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockRioInfoCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockRioInfoCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedRioInfoCache.GetByIndexCalls())
func (mock *RioInfoCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockRioInfoCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockRioInfoCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RioInfoCacheMock) List(selector labels.Selector) ([]*v1a.RioInfo, error) {
	if mock.ListFunc == nil {
		panic("RioInfoCacheMock.ListFunc: method is nil but RioInfoCache.List was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	lockRioInfoCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRioInfoCacheMockList.Unlock()
	return mock.ListFunc(selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRioInfoCache.ListCalls())
func (mock *RioInfoCacheMock) ListCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	lockRioInfoCacheMockList.RLock()
	calls = mock.calls.List
	lockRioInfoCacheMockList.RUnlock()
	return calls
}
